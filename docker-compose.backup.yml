version: '3.3'

services:
  chat-app-s1:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: node cluster.js # nodemon cluster.js
    environment:
      NODE_ENV: 'production'
      NODE_PORT: 3000
      NUM_OF_CLUSTERS: 25
      HOST: 'http://localhost:8080/'
      REDIS_HOST: 'chat-app-redis'
      REDIS_PORT: '6379'
      REDIS_FAMILY: 4
      REDIS_USERNAME: ''
      REDIS_DB: 0
      REDIS_PASSWD: 'redis12345'
      REDIS_FLUSHALL: 'true'
    # volumes:
    #   - .:/home/node/app
    #   - /home/node/app/node_modules
    depends_on:
      - chat-app-redis
    networks:
      - chat-app-network

  chat-app-s2:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: node cluster.js # nodemon cluster.js
    environment:
      NODE_ENV: 'production'
      NODE_PORT: 3000
      NUM_OF_CLUSTERS: 25
      HOST: 'http://localhost:8080/'
      REDIS_HOST: 'chat-app-redis'
      REDIS_PORT: '6379'
      REDIS_FAMILY: 4
      REDIS_USERNAME: ''
      REDIS_DB: 0
      REDIS_PASSWD: 'redis12345'
      REDIS_FLUSHALL: 'true'
    # volumes:
    #   - .:/home/node/app
    #   - /home/node/app/node_modules
    depends_on:
      - chat-app-redis
    networks:
      - chat-app-network

  chat-app-load-balancer:
    build:
      context: ./docker/haproxy
      dockerfile: Dockerfile
    hostname: chat-app
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      - chat-app-s1
      - chat-app-s2
    networks:
      - chat-app-network

  chat-app-redis:
    build:
      context: ./docker/redis
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - chat-app-network

networks:
  chat-app-network:
    driver: bridge
